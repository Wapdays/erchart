{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bulkdata","acctrans","accgas","time","users","fees","timestamp","transarr","accgasarray","cumgasprices","_this2","axios","get","then","res","data","result","length","cumulativeGasUsed","user","fee","Array","apply","map","Number","i","push","from","moment","unix","timeStamp","utc","format","parseInt","gasPrice","slicedArr","slice","Set","gasprices","reduce","a","b","setState","console","log","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data2","data3","data4","options","maintainAspectRatio","responsive","react_default","createElement","id","es","width","height","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8eb1803a.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Line} from 'react-chartjs-2';\nimport moment from \"moment\";\n\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bulkdata: [],\n      acctrans: [],\n      accgas: [],\n      time: [],\n      users: [],\n      fees: [],\n      timestamp: [],\n      transarr: [],\n      accgasarray: [],\n      cumgasprices: []\n    };\n  }\n  componentDidMount() {\n    axios.get('https://api-rinkeby.etherscan.io/api?module=account&action=txlist&address=0xbe233c4bc5c4e4f0c9c7d2b1908047dc51f98748&startblock=0&endblock=99999999&sort=asc&apikey=YourApiKeyToken')\n      .then(res => {\n        const bulkdata = res.data;\n        const acctrans = res.data.result.length;\n        const accgas = res.data.result[res.data.result.length - 1].cumulativeGasUsed\n        var user = []\n        var timestamp = []\n        var fee = []\n        var transarr = Array.apply(null, {length: acctrans}).map(Number.call, Number)\n        for (var i = 0; i < res.data.result.length; i++) {\n           user.push(res.data.result[i].from);\n        }\n        var accgasarray = []\n        for (var i = 0; i < res.data.result.length; i++) {\n         accgasarray.push(res.data.result[i].cumulativeGasUsed);\n      }\n        for (var i = 0; i < res.data.result.length; i++) {\n          timestamp.push(moment.unix(res.data.result[i].timeStamp).utc().format('dddd, MMMM Do'));\n       }\n        for (var i = 0; i < res.data.result.length; i++) {\n          fee.push(parseInt(res.data.result[i].gasPrice));\n       }\n\n       var fees = 0;\n\n        for(var i = 0; i < fee.length; i++){\n\n          fees += fee[i]\n\n        }\n        var users = []\n        for(var i = 0; i < user.length; i++){\n          var slicedArr = user.slice(0, i);\n          users.push(Array.from(new Set(slicedArr)).length)\n        }\n        // const users = Array.from(new Set(user)).length;\n        var gasprices = []\n        \n        for(var i = 0; i < user.length; i++){\n          gasprices.push(parseInt(res.data.result[i].gasPrice))\n        }\n        var cumgasprices = []\n        gasprices.reduce(function(a,b,i) { return cumgasprices[i] = a+b; },0);\n        \n        const time =  moment.unix(res.data.result[res.data.result.length - 1].timeStamp).utc().format('dddd, MMMM Do, YYYY h:mm:ss A')\n        \n        this.setState({ bulkdata: bulkdata })\n        this.setState({ acctrans: acctrans })\n        this.setState({ accgas: accgas })\n        this.setState({ time: time })\n        this.setState({ users: users })\n        this.setState({ fees: fees })\n        this.setState({ timestamp: timestamp })\n        this.setState({ transarr: transarr })\n        this.setState({ accgasarray: accgasarray })\n        this.setState({ cumgasprices: cumgasprices })\n        console.log(bulkdata);\n        console.log(accgas);\n        console.log(time)\n        console.log(user)\n        console.log(timestamp)\n        console.log(fees)\n        console.log(users)\n        // console.log(bulkdata.result.length)\n      })\n  }\n\n  render(){\n  const data = {\n    labels: this.state.timestamp,\n    datasets: [\n      {\n        label: 'Accumulative Users =  '+this.state.users[this.state.users.length-1],\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'orange',\n        borderColor: 'orange',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        // data: this.state.btc\n        data: this.state.users\n      }\n      // },\n      // {\n      //   label: 'Accumulative Interactions',\n      //   fill: false,\n      //   lineTension: 0.1,\n      //   backgroundColor: 'yellow',\n      //   borderColor: 'yellow',\n      //   borderCapStyle: 'butt',\n      //   borderDash: [],\n      //   borderDashOffset: 0.0,\n      //   borderJoinStyle: 'miter',\n      //   pointBorderColor: '#000000',\n      //   pointBackgroundColor: '#000000',\n      //   pointBorderWidth: 1,\n      //   pointHoverRadius: 5,\n      //   pointHoverBackgroundColor: '#000000',\n      //   pointHoverBorderColor: '#000000',\n      //   pointHoverBorderWidth: 2,\n      //   pointRadius: 1,\n      //   pointHitRadius: 10,\n      //   data: [this.state.acctrans]\n      // },\n      // {\n      //   label: 'Accumulative Gas Fees/100000000',\n      //   fill: false,\n      //   lineTension: 0.1,\n      //   backgroundColor: 'green',\n      //   borderColor: 'green',\n      //   borderCapStyle: 'butt',\n      //   borderDash: [],\n      //   borderDashOffset: 0.0,\n      //   borderJoinStyle: 'miter',\n      //   pointBorderColor: '#000000',\n      //   pointBackgroundColor: '#000000',\n      //   pointBorderWidth: 1,\n      //   pointHoverRadius: 5,\n      //   pointHoverBackgroundColor: '#000000',\n      //   pointHoverBorderColor: '#000000',\n      //   pointHoverBorderWidth: 2,\n      //   pointRadius: 1,\n      //   pointHitRadius: 10,\n      //   data: [this.state.fees/100000000]\n      // },\n      // {\n      //   label: 'Accumulative Gas Used',\n      //   fill: false,\n      //   lineTension: 0.1,\n      //   backgroundColor: 'blue',\n      //   borderColor: 'blue',\n      //   borderCapStyle: 'butt',\n      //   borderDash: [],\n      //   borderDashOffset: 0.0,\n      //   borderJoinStyle: 'miter',\n      //   pointBorderColor: '#000000',\n      //   pointBackgroundColor: '#000000',\n      //   pointBorderWidth: 1,\n      //   pointHoverRadius: 5,\n      //   pointHoverBackgroundColor: '#000000',\n      //   pointHoverBorderColor: '#000000',\n      //   pointHoverBorderWidth: 2,\n      //   pointRadius: 1,\n      //   pointHitRadius: 10,\n      //   data: [this.state.accgas]\n      // }\n    ]\n  };\n  const data2 = {\n    labels: this.state.timestamp,\n    datasets: [\n      {\n        label: 'Accumulative Interactions = '+this.state.transarr[this.state.transarr.length-1],\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'orange',\n        borderColor: 'orange',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        // data: this.state.btc\n        data: this.state.transarr\n      }\n    ]\n  };\n  const data3 = {\n    labels: this.state.timestamp,\n    datasets: [\n      {\n        label: 'Accumulative Gas Used = '+this.state.accgasarray[this.state.accgasarray.length-1],\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'orange',\n        borderColor: 'orange',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        // data: this.state.btc\n        data: this.state.accgasarray\n      }\n    ]\n  };\n  const data4 = {\n    labels: this.state.timestamp,\n    datasets: [\n      {\n        label: 'Accumulative Gas Fees = '+this.state.cumgasprices[this.state.cumgasprices.length-1],\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'orange',\n        borderColor: 'orange',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        // data: this.state.btc\n        data: this.state.cumgasprices\n      }\n    ]\n  };\n  const options = {\n       \n    \n    maintainAspectRatio: false,\n    responsive: true,\n    \n};\n  return (\n    <div id=\"chartHolder\">\n      <div id=\"lineChart\"> \n        <Line\n        data = {data}\n        width={10}\n        height={50}\n        options={options}\n        />\n      </div>\n      <div id=\"lineChart2\">\n        <Line\n        data = {data2}\n        width={10}\n        height={50}\n        options={options}\n      />\n      </div>\n      <div id=\"lineChart3\">\n        <Line\n        data = {data3}\n        width={10}\n        height={50}\n        options={options}\n      />\n      </div>\n      <div id=\"lineChart4\">\n        <Line\n        data = {data4}\n        width={10}\n        height={50}\n        options={options}\n      />\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}